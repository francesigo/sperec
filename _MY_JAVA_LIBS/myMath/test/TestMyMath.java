package myMath.test;

import java.util.Arrays;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.RejectedExecutionException;

import com.mathworks.engine.EngineException;
import com.mathworks.matlab.types.Complex;

import myDSP.MyComplexArrayFloat;
import myDSP.MyFFT;
import myDSP.wavelet.Dyadup;
import myDSP.wavelet.Wextend;
import myDSP.wavelet.Wfilters;
import myMath.MyMath;
import myMath.MyMatrix;
import myMatlabConnection.MyMatlabConnection;

public class TestMyMath {

	
	MyMatlabConnection matlab = null;

	static final String sep ="-------------------------------------------------\n";


	public TestMyMath() throws Exception {
		matlab = new MyMatlabConnection();
	}
	
	private void conv2() throws Exception {
		//double [] x = {650.8057545055411, 650.2289118081128, 649.5344712549737, 648.7432454161313, 647.87353138285, 646.9414248181969, 645.9605552003393, 644.944940644967, 643.9092155423497, 642.8665736064967, 641.8290915180338, 640.8079073236675, 639.8126703362149, 638.8528993022674, 637.9376795981228, 637.0731530647553, 636.2627031364844, 635.5071702963565, 634.8055482471194, 634.1585430986271, 633.5692589800694, 633.0417080802135, 632.581170014375, 632.1941839786147, 631.888336047057, 631.6739193288475, 631.5635221794274, 631.5690204820488, 631.7013035482784, 631.9706797445581, 632.3866711683212, 632.9595952546398, 633.7010092903392, 634.6221326792091, 635.7336904429638, 637.0465925326795, 638.5715096237191, 640.3193250605996, 642.3011857149203, 644.526614613655, 647.0028423661145, 649.7349270545075, 652.7257959912894, 655.9774702689356, 659.4915754071415, 663.2683122100748, 667.3062784888324, 671.6030735910717, 676.1554543950531, 680.9602226455239, 686.0140308800585, 691.3111480268707, 696.8428658194327, 702.5978967306639, 708.5624481770768, 714.7210936633066, 721.0568254686843, 727.5496794510304, 734.1763599141901, 740.911036778806, 747.7257408995829, 754.5910628514123, 761.476400889295, 768.348813267459, 775.1725438891647, 781.9095495920175, 788.5204221338543, 794.9657364345287, 801.206623594439, 807.2042381079638, 812.9195719852191, 818.3142709220984, 823.3519872210605, 827.9998845718331, 832.22900658827, 836.0132346572605, 839.328760812819, 842.1543971596695, 844.4721253951515, 846.2676640684364, 847.5301115564935, 848.2506974519413, 848.4221824335585, 848.0393271488293, 847.0994861417067, 845.6031408978711, 843.5538498298724, 840.9574458786644, 837.8217498073935, 834.1570109335405, 829.9765923493028, 825.2974736819436, 820.1399068694633, 814.5264920414264, 808.481701508455, 802.0322253306383, 795.2077501388056, 788.0415062596701, 780.5696476344871, 772.8299139368751, 764.8610698319405, 756.7030106637908, 748.3971003378396, 739.9860528055234, 731.5123444913125, 723.0162348085347, 714.5348247432316, 706.1021116962783, 697.7495413651852, 689.5064112445165, 681.3993503706106, 673.4515440543786, 665.6829743442221, 658.111186279347, 650.7522745702796, 643.6216485593305, 636.7334875600051, 630.099857434276, 623.7305260796005, 617.6331935094915, 611.8141693521848, 606.278997453214, 601.0320417039948, 596.0757672724724, 591.4108614055507, 587.0366079383842, 582.9514583582201, 579.153454177787, 575.6392898324858, 572.4032278171599, 569.4369481280577, 566.729618405695, 564.2683025742647, 562.0385395979655, 560.0239212247665, 558.2057138381505, 556.5639956528602, 555.0787999126638, 553.7312350773171, 552.5047821552802, 551.3848381102111, 550.3577656807593, 549.4112192931548, 548.5344151374421, 547.718049904832, 546.9546061090122, 546.2373384458429, 545.5585570172923, 544.9099912765931, 544.2833385531128, 543.6705841198263, 543.0649672168352, 542.4601997405288, 541.8491136798684, 541.2237241845162, 540.5751934756936, 539.8938438793605, 539.1699736873113, 538.3932245658932, 537.5512967759644, 536.6309010235954, 535.6185202667864, 534.5013689371051, 533.2698590672926, 531.9175121344305, 530.4396179887846, 528.8338711948485, 527.1006136504566, 525.2422652669804, 523.2639265277788, 521.1721999758313, 518.972290902038, 516.6683384124289, 514.2644112719688, 511.76434615968077, 509.17283224491484, 506.4954421308527, 503.73717739389014, 500.90337065870665, 498.00148038683915, 495.0407850338773, 492.0327685617795, 488.99060556981783, 485.92666909184214, 482.85316844714947, 479.78345241121707, 476.7322425261881, 473.71752907282075, 470.76061362879256, 467.8839017210707, 465.1117077094819, 462.4719368406616, 459.99501579289637, 457.71418422893953, 455.66372305950614, 453.87335135617144, 452.36799026624647, 451.1695011684284, 450.2958239954975, 449.76200407571264, 449.5804911885296, 449.7587558021716, 450.300583641418, 451.2097516975331, 452.48965730371066, 454.1430632491336, 456.17199175851607, 458.574827142638, 461.34639872528186, 464.4799582585512, 467.9667362203084, 471.7959787692287, 475.95545477021915, 480.42996322392156, 485.20215284490007, 490.2555085740809, 495.57380090949715, 501.14074412649916, 506.93934302821077, 512.9478610457463, 519.1396867142493, 525.4861167474206, 531.9555171394298, 538.5125275678319, 545.1191748202874, 551.7334066413065, 558.3111677022802, 564.8131221438681, 571.2048998853408, 577.4557818875048, 583.5394096397557, 589.4312287425909, 595.1082975639235, 600.5523370091616, 605.7487017577273, 610.6838905920981, 615.3460575453478, 619.7241791746703, 623.8084482289588, 627.593929989386, 631.0803050998146, 634.2704208584641, 637.1699578372097, 639.7847562860562, 642.1201097111442, 644.1827658112039, 645.9801026575246, 647.5183773801317, 648.8031895204632, 649.8385219087777, 650.6276134071587, 651.1775574834602, 651.499482347715, 651.6066045614461, 651.5147579539383, 651.2415900780853};
		double [] x = {218.0902509758841, 211.09482643479913, 205.86356002571034, 204.59643165641953, 208.1424807980237, 215.95127414040098, 226.0324301162111, 235.34360839814394, 242.0691408678586, 245.78820230792016, 247.0524599069506, 247.34629046092724, 247.55311511806124, 247.8250111688166, 248.17051582289102, 248.28017063070473, 248.00526403749058, 247.22312739534433, 245.61851828317535, 243.2086233308918, 240.31529746365456, 238.05666000904367, 237.9380329052119, 240.09242093004877, 243.4624986190119, 245.49033975767162, 242.88331971399552, 235.10402670058164, 223.9261601570588, 212.567838057335, 205.14743999341576, 202.70739726813653, 203.62536707798986, 205.6975693985556, 206.1001496424272, 204.03697670646008, 200.73552347138641, 197.44172910574392, 195.99262341585407, 197.45861566497058, 201.1635187607296, 205.69972034559086, 208.02218921573203, 205.02632989041626, 196.59020936813386, 185.11085395584172, 176.2403897696331, 176.66870038385002, 188.56072763350198, 210.0152196368636, 235.25610299558426, 256.19579534568715, 268.6715184243441, 272.1419346029158, 268.43495190406355, 261.77638520537676, 254.68200044845014, 247.94972728790975, 242.2303521102919, 237.18626513570433, 232.87042858825464, 229.8911646550272, 228.28466615672264, 227.99011528036272, 228.7186591718103, 229.8028904918593, 230.74071796747725, 231.25275077337972, 231.31126927327946, 231.20414429862032, 231.31353473473953, 231.9145172333768, 233.05464972604238, 234.51324639736262, 235.87044379194546, 236.62873655661429, 236.3476596249891, 234.75351211646887, 231.813868329119, 227.75862520744766, 223.0296238857247, 218.17528570015682, 213.725961911145, 210.1015314898671, 207.5737830617434, 206.2773103107129, 206.24076827525727, 207.3884359469393, 209.5126635851008, 212.25263027507177, 215.1064270606973, 217.51330791606438, 218.98860765969965, 219.24689326633393, 218.2834931433079, 216.3825607235445, 214.05505270863128, 211.95806583972927, 210.75394549682542, 210.9384053062204, 212.72435176340386, 215.89521012120102, 219.88857405442516, 224.11988514287012, 228.05736090758668, 231.44266979539282, 234.17773462257242, 235.6408653302641, 234.9446946337381, 231.1234437883644, 223.4411077844275, 212.72574697105424, 200.95345674188317, 190.4465092799942, 183.6375873649126, 181.38096608496392, 182.7865390217203, 186.193266134221, 188.9494567306486, 188.80126209251455, 185.58951545467698, 180.90317969178327, 178.32490053759412, 182.36113976064527, 194.8418130655724, 214.0164122772507, 235.04083653889882, 251.0445319561079, 257.3918720581777, 253.56899045658565, 242.09663989024475, 227.66120513249496, 214.29941080525217, 203.71106060532725, 196.22349060612612, 191.22053859628903, 187.92938403841538, 186.15400556467245, 185.7802579477712, 186.60055162474757, 188.3963694994391, 190.79317905071622, 193.3748475207037, 195.7735061077218, 197.62960860193238, 198.68058006796832, 198.81094001418577, 198.06424971071522, 196.68418253981653, 195.05017889730652, 193.65654894152345, 193.02000337683992, 193.3530806825417, 194.4505898850501, 195.6699986349352, 196.07412782047217, 195.12598183681686, 193.01493269871875, 190.51839892784784, 188.82157538427265, 188.69773027734374, 190.07697171003898, 192.59848120802513, 195.61580324033946, 198.40084403065842, 200.6361804339512, 201.3722937188657, 199.64743182300316, 196.14973937484362, 192.51186821807963, 192.78774345627366, 202.47167970172868, 224.0468782277759, 257.72429768183514, 299.0297912571572, 337.9545838644628, 365.27794890044987, 372.16587484774345, 353.6815694567817, 313.7403934644668, 259.5098319941577, 202.34058391949517, 155.9799919602138, 128.9487355603732, 127.40530652246726, 152.30063328603498, 195.7579164490796, 247.2733072114437, 293.76471711590074, 323.3873584640957, 333.0648873131414, 325.5169242155648, 307.38056466586613, 286.94653676824396, 268.2235611218184, 251.96939040030398, 237.91498981766347, 224.99553902472184, 213.36806279469445, 203.97664222980808, 197.05744550580926, 192.45845521681426, 189.591839322456, 187.6256080274893, 186.14892976138492, 185.08205928400443, 184.55359158402342, 184.75811607825725, 185.581676983208, 186.64468852044698, 187.40929250308267, 187.3936577863219, 186.57353079583743, 185.278548103727, 183.96280733975664, 182.99163516545875, 182.3080300148859, 181.54395940989812, 180.29389953467242, 178.2973980200329, 175.64922615974348, 172.68970868359747, 169.90306551837898, 167.92122440071844, 167.35732631842262, 168.95193267570343, 173.27285515143518, 179.99918950076204, 188.03710090172387, 195.39442421314325, 199.83626128342695, 200.62724639477585, 198.52432279658538, 195.61357720154444, 194.66574629087253, 196.973946641494, 202.26612995152013, 209.29779051013656, 216.19346498484794, 222.00004655592673, 226.8100402264872, 231.04106260090472, 235.33965348902248, 239.9590289735739, 244.62658343085695, 248.96459554743032, 252.48064430562076, 254.6930182132274, 255.28212614120162, 254.065605628146, 251.19659392927107, 247.12028033137673, 242.30671671246196, 237.15519156439393, 231.56863200695173, 225.15836175005498, 218.0902509758841, 211.09482643479913, 205.86356002571034, 204.59643165641953, 208.1424807980237, 215.95127414040098, 226.0324301162111, 235.34360839814394, 242.0691408678586, 245.78820230792016, 247.0524599069506, 247.34629046092724, 247.55311511806124, 247.8250111688166, 248.17051582289102, 248.28017063070473, 248.00526403749058, 247.22312739534433, 245.61851828317535, 243.2086233308918, 240.31529746365456, 238.05666000904367, 237.9380329052119, 240.09242093004877, 243.4624986190119, 245.49033975767162, 242.88331971399552, 235.10402670058164, 223.9261601570588, 212.567838057335, 205.14743999341576, 202.70739726813653, 203.62536707798986, 205.6975693985556, 206.1001496424272, 204.03697670646008, 200.73552347138641, 197.44172910574392, 195.99262341585407, 197.45861566497058, 201.1635187607296, 205.69972034559086, 208.02218921573203, 205.02632989041626, 196.59020936813386, 185.11085395584172, 176.2403897696331, 176.66870038385002, 188.56072763350198, 210.0152196368636, 235.25610299558426, 256.19579534568715, 268.6715184243441, 272.1419346029158, 268.43495190406355, 261.77638520537676, 254.68200044845014, 247.94972728790975, 242.2303521102919, 237.18626513570433, 232.87042858825464, 229.8911646550272, 228.28466615672264, 227.99011528036272};
		double [] xe  = Wextend.get("1D", "per", x, 8);
		
		double [][] ff = Wfilters.getFilters("sym8", "d");
		double [] lo = ff[0];
		double [] hi = ff[1];
		hi = Dyadup.get(hi, 0, 1);
		hi = Dyadup.get(hi, 0, 1);
		
		double [] f = hi;
		String shape = "full";
		double [] j = MyMath.conv2(xe, f, shape);
		double [] m = (double [])matlab.eng.feval("conv2",  xe, f, shape);
		MyMath.compare_vectors(sep+"TestMyMath: comparing conv2: ", j, m, 1e-40);
		
		// Now want to use fft
		double [] X = new double[j.length];
		Arrays.fill(X, 0.0);
		System.arraycopy(xe, 0, X, 0, xe.length);
		double [] Y = new double[j.length];
		Arrays.fill(Y, 0.0);
		System.arraycopy(f, 0, Y, 0, f.length);
		MyComplexArrayFloat FX = MyFFT.realForwardFull(MyMath.tofloat(X));
		MyComplexArrayFloat FY = MyFFT.realForwardFull(MyMath.tofloat(Y));
		MyComplexArrayFloat FZ = FX.arrayTimes(FY);
		MyComplexArrayFloat Cres = MyFFT.complexInverse(FZ);
		double [] res = MyMath.todouble(Cres.getRealFloat());
		MyMath.compare_vectors(sep+"TestMyMath: comparing convolution using fft: ", res, m, 1e-40);
	}
	
	private void linspace() throws Exception  {
		int start = 1;
		int end = 88;
		int n = 256;
		double [] j = MyMath.linspace(start, end, n);
		double [] m = (double [])matlab.eng.feval("linspace",  (double)start, (double)end, (double)n);
		MyMath.compare_vectors(sep+"TestMyMath: comparing linspace (" + start+", " + end+ ", " + n+") with matlab", j, m, 1e-20);
	}
	private void roots() throws RejectedExecutionException, EngineException, InterruptedException, ExecutionException {
		double [] u = MyMath.uniformRandomVector(10);
		roots(u);
	}
	
	private void roots(double [] u) throws RejectedExecutionException, EngineException, InterruptedException, ExecutionException {
			
		double [][]j_zz = MyMath.roots(u);
		
		try // in case at least 1 root is complex
		{
			Complex [] m_zz = matlab.eng.feval("roots", u);

			compare(sep+"TestMyMath: comparing roots (complex) with matlab", m_zz, j_zz);		
		}
		
		catch (Exception e)
		{
			double [] m_zz = matlab.eng.feval("roots", u);
			double maxdiff = 0;

			int N = m_zz.length;
			double [] diff = new double[N];
			for (int i=0; i<m_zz.length; i++)
			{
				double z1 = m_zz[i]; 
				double [] z2 = j_zz[i];
				diff[i] = Math.abs(z1 - z2[0]) + Math.abs(0 - z2[1]);

				if (diff[i]>maxdiff)
					maxdiff = diff[i];
			}
			
			System.out.println(sep+"TestMyMath: comparing roots (real) with matlab");
			System.out.println("\t max diff: " + maxdiff);
		}
				
		
		
	}
	
	/**
	 * 
	 * @param msg
	 * @param m_zz
	 * @param j_zz
	 */
	public double compare(String msg, Complex [] m_zz, double [][] j_zz) {

		double maxdiff = 0;

		int N = m_zz.length;
		double [] diff = new double[N];
		for (int i=0; i<m_zz.length; i++)
		{
			Complex z1 = m_zz[i]; 
			double [] z2 = j_zz[i];
			diff[i] = Math.abs(z1.real - z2[0]) + Math.abs(z1.imag - z2[1]);

			if (diff[i]>maxdiff)
				maxdiff = diff[i];
		}
		
		System.out.println(msg);
		
		for (int i=0; i<m_zz.length; i++) {
			Complex z1 = m_zz[i]; 
			double [] z2 = j_zz[i];
			System.out.println("\n  java: " + z2[0] + " +i* " + z2[1]);
			System.out.println("  matl: " + z1.real + " +i* " + z1.imag);
		}
		System.out.println("\t max diff: " + maxdiff);
		
		return maxdiff;
	}
	
	public void hanning(int k) throws Exception {
		double [] j = MyMath.hanning(k);;
		double [] m = matlab.eng.feval("hanning", (double)k);
		
		MyMath.compare_vectors(sep+"Test hanning (" + k + "): ", j, m);
	}
	
	public static void main (String [] args) throws Exception {

		TestMyMath me = new TestMyMath();

		me.roots();
		me.hanning(14);
		me.linspace();
		me.conv2();

	}

}
